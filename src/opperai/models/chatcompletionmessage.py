"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .annotation import Annotation, AnnotationTypedDict
from .chatcompletionaudio import ChatCompletionAudio, ChatCompletionAudioTypedDict
from .chatcompletionmessagecustomtoolcall import (
    ChatCompletionMessageCustomToolCall,
    ChatCompletionMessageCustomToolCallTypedDict,
)
from .chatcompletionmessagefunctiontoolcall import (
    ChatCompletionMessageFunctionToolCall,
    ChatCompletionMessageFunctionToolCallTypedDict,
)
from .functioncall_output import FunctionCallOutput, FunctionCallOutputTypedDict
from opperai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from opperai.utils import validate_const
import pydantic
from pydantic import ConfigDict, model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Any, Dict, List, Literal, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


ChatCompletionMessageToolCallTypedDict = TypeAliasType(
    "ChatCompletionMessageToolCallTypedDict",
    Union[
        ChatCompletionMessageFunctionToolCallTypedDict,
        ChatCompletionMessageCustomToolCallTypedDict,
    ],
)


ChatCompletionMessageToolCall = TypeAliasType(
    "ChatCompletionMessageToolCall",
    Union[ChatCompletionMessageFunctionToolCall, ChatCompletionMessageCustomToolCall],
)


class ChatCompletionMessageTypedDict(TypedDict):
    content: NotRequired[Nullable[str]]
    refusal: NotRequired[Nullable[str]]
    role: Literal["assistant"]
    annotations: NotRequired[Nullable[List[AnnotationTypedDict]]]
    audio: NotRequired[Nullable[ChatCompletionAudioTypedDict]]
    function_call: NotRequired[Nullable[FunctionCallOutputTypedDict]]
    tool_calls: NotRequired[Nullable[List[ChatCompletionMessageToolCallTypedDict]]]


class ChatCompletionMessage(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    content: OptionalNullable[str] = UNSET

    refusal: OptionalNullable[str] = UNSET

    ROLE: Annotated[
        Annotated[Literal["assistant"], AfterValidator(validate_const("assistant"))],
        pydantic.Field(alias="role"),
    ] = "assistant"

    annotations: OptionalNullable[List[Annotation]] = UNSET

    audio: OptionalNullable[ChatCompletionAudio] = UNSET

    function_call: OptionalNullable[FunctionCallOutput] = UNSET

    tool_calls: OptionalNullable[List[ChatCompletionMessageToolCall]] = UNSET

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "content",
            "refusal",
            "annotations",
            "audio",
            "function_call",
            "tool_calls",
        ]
        nullable_fields = [
            "content",
            "refusal",
            "annotations",
            "audio",
            "function_call",
            "tool_calls",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        for k, v in serialized.items():
            m[k] = v

        return m
