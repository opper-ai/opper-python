"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .choice import Choice, ChoiceTypedDict
from .completionusage import CompletionUsage, CompletionUsageTypedDict
from enum import Enum
from opperai.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from opperai.utils import validate_const
import pydantic
from pydantic import ConfigDict, model_serializer
from pydantic.functional_validators import AfterValidator
from typing import Any, Dict, List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class ChatCompletionServiceTier(str, Enum):
    AUTO = "auto"
    DEFAULT = "default"
    FLEX = "flex"
    SCALE = "scale"
    PRIORITY = "priority"


class ChatCompletionTypedDict(TypedDict):
    id: str
    choices: List[ChoiceTypedDict]
    created: int
    model: str
    object: Literal["chat.completion"]
    service_tier: NotRequired[Nullable[ChatCompletionServiceTier]]
    system_fingerprint: NotRequired[Nullable[str]]
    usage: NotRequired[Nullable[CompletionUsageTypedDict]]


class ChatCompletion(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    id: str

    choices: List[Choice]

    created: int

    model: str

    OBJECT: Annotated[
        Annotated[
            Literal["chat.completion"],
            AfterValidator(validate_const("chat.completion")),
        ],
        pydantic.Field(alias="object"),
    ] = "chat.completion"

    service_tier: OptionalNullable[ChatCompletionServiceTier] = UNSET

    system_fingerprint: OptionalNullable[str] = UNSET

    usage: OptionalNullable[CompletionUsage] = UNSET

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["service_tier", "system_fingerprint", "usage"]
        nullable_fields = ["service_tier", "system_fingerprint", "usage"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        for k, v in serialized.items():
            m[k] = v

        return m
