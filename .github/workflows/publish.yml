name: Build & Publish

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Run lint
        run: |
          pip install ruff==0.3.3
          ruff format --check .

  test:
    runs-on: ubuntu-latest
    needs: 
      - lint
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Run lint
        run: |
          pip install ruff==0.1.11
          ruff format --check .
      - name: Run tests
        env:
          OPPER_API_KEY: ${{ secrets.OPPER_API_KEY }}
        run: |
          python -m pytest

  coverage:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Run tests
        env:
          OPPER_API_KEY: ${{ secrets.OPPER_API_KEY }}
        run: |
          python -m pytest --cov=src --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.1.0
        with:
          files: coverage.xml
          slug: opper-ai/opper-python
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[test]
      - name: Install pypa/build
        run: >-
          python3 -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
  
  tag:
    name: Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - build
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.tag_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - id: tag_version
        uses: salsify/action-detect-and-tag-new-version@v2
        with:
          create-tag: true
          version-command: |
            grep '^version = ' pyproject.toml | sed 's/^version = "\(.*\)"$/\1/'


  publish-test:
    name: Publish SDK to TestPyPI
    if: github.event_name != 'pull_request' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build
    environment:
      name: testpypi
      url: https://test.pypi.org/p/opperai
    permissions:
      id-token: write  
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true


  publish-to-pypi:
    name: >-
      Publish Python SDK to PyPI
    needs:
      - tag
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/opperai
    permissions:
      id-token: write  

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  github-release:
    name: >-
      GitHub Release
    needs:
      - publish-to-pypi
      - tag
    runs-on: ubuntu-latest

    permissions:
      contents: write  
      id-token: write  

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ needs.tag.outputs.tag }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ needs.tag.outputs.tag }}' dist/**
        --repo '${{ github.repository }}'

